//importing packages
from tkinter import *
	import mysql11

	 def display_movies(movies,userid,username):
       useid=userid
    	 usename=username
    	 def count_movie():
       global user_id, user_name, movie_id
       movie_id = movies_spinbox.get()[0:5]
       mysql11.update_count(movie_id,useid,usename)
       
 window = Tk()
   	 window.title("Options")
   	 window.geometry('800x200')
    	 #window.resizable(False, False)

    	 movies_format = []
   	 for movie in movies:
       movie_attr = ''
       for attr in movie:
       movie_attr += str(attr) + '    '
       movies_format.append(movie_attr)

movies_spinbox = Spinbox(window,     values=tuple(movies_format))
     movies_spinbox.place(x=10, y=10, height=30, width=650)

play_button = Button(window, text='Play',  command=count_movie)
     play_button.place(x=10, y=40, height=30, width=50)



    window.mainloop()




from tkinter import *
import mysql.connector
from tkinter import Entry
import newwin
import mysql11
import mysql.connector

cnx = mysql.connector.connect(user='root', password='root',
                              host='127.0.0.1',
                              database='video_library')
#cnx.autocommit(True)
cursor= cnx.cursor()


#Label(window,text="video library",font=("arial bold",35)).grid(row=1,colomn=1,sticky=W)
window=Tk()
window.title("Options")
window.geometry('450x450')
window.resizable(False,False)
Label(window,text="VIDEO LIBRARY",font=("arial bold",35)).grid(row=1,column=1,sticky=W)
Label(window,text="UserId").grid(row=2,column=0,sticky=W)
Label(window,text="Username").grid(row=3,column=0,sticky=W)
Label(window,text="Age").grid(row=4,column=0,sticky=W)
Label(window,text="Country").grid(row=5,column=0,sticky=W)
Label(window,text="Language").grid(row=6,column=0,sticky=W)
Label(window,text="genre").grid(row=7,column=0,sticky=W)

Label(window,text="VideoType").grid(row=8,column=0,sticky=W)
Label(window,text="MovieName").grid(row=9,column=0,sticky=W)
Label(window,text="Rating").grid(row=10,column=0,sticky=W)
Label(window,text="Actor").grid(row=11,column=0,sticky=W)

t1 = Entry(window,width=20,bg="white")
t1.grid(row=2,column=1,sticky=W)
t2 = Entry(window,width=20,bg="white")
t2.grid(row=3,column=1,sticky=W)
t3 = Entry(window,width=20,bg="white")
t3.grid(row=4,column=1,sticky=W)
t4 = Entry(window,width=20,bg="white")
t4.grid(row=5,column=1,sticky=W)
t5 = Entry(window,width=20,bg="white")
t5.grid(row=6,column=1,sticky=W)
t6 = Entry(window,width=20,bg="white")
t6.grid(row=7,column=1,sticky=W)
t7 = Entry(window,width=20,bg="white")
t7.grid(row=8,column=1,sticky=W)
t8 = Entry(window,width=20,bg="white")
t8.grid(row=9,column=1,sticky=W)
t10 = Entry(window,width=20,bg="white")
t10.grid(row=11,column=1,sticky=W)
t9 = Entry(window,width=20,bg="white")
t9.grid(row=10,column=1,sticky=W)
#t11 = Entry(window,width=20,bg="white")
#t11.grid(row=10,column=1,sticky=W)

def getmovielist():
    def construct_query(criteria):
        attributes = ('age', 'country', 'language', 'genre', 'video_type', 'actor', 'rating', 'm_name')
        conditions = tuple(zip(attributes, criteria))
        query = "SELECT * FROM movie_details WHERE "
        query_conditions = []
        for condition in conditions:
            if condition[1] == '': continue
            if condition[1].isdigit() or condition[1].replace('.', '').isdigit():
                query_conditions.append(condition[0] + " = " + condition[1])
            elif condition[0] == 'm_name':
                query_conditions.append(condition[0] + " LIKE '%" + condition[1] + "%'")
            else:
                query_conditions.append(condition[0] + " = '" + condition[1] + "'")
        query_conditions = ' AND '.join(query_conditions)
        query += query_conditions + ';'
        return query

    userid=t1.get()
    username=t2.get()
    age = t3.get()
    country = t4.get()
    language = t5.get()
    genre = t6.get()
    videotype = t7.get()
    moviename = t8.get()
    actor = t10.get()
    rating = t9.get()
    query = construct_query((age, country,language,genre,videotype,actor,rating,moviename))
    movies = mysql11.search_result(query)
    newwin.display_movies(movies, userid, username)

def submit():
    pass
def gethitlist():
    win1=Tk()
    query="select * from movie_details  where movie_id in (select t.movie_id from temp t)"
    cursor.execute(query)
    out=cursor.fetchall()
    Label(win1,text=out).grid(row=1,column=0,sticky=W)

uid=t1.get()
def gethistory():
#args=(uid)
#cursor.callproc('proce1',args=(uid,))
query="select * from movie_details where movie_id IN(select u.movie_id from user_history u where u.user_id=%s)" % (t1.get())
cursor.execute(query)
 q=cursor.fetchall()
 win=Tk()
win.title('USER HISTORY')
win.geometry('500x300')
Label(win, text=q).grid(row=2, column=0, sticky=W)


var = IntVar()
#Button(window,text="Get User History",command=gethistory).grid(row=14,column=0,sticky=W)

Button(window,text="GET USER HISTORY",command=gethistory).grid(row=16,column=1,sticky=W)
Button(window,text="LIST OF HIT MOVIES",command=gethitlist).grid(row=18,column=1,sticky=W)
var12=IntVar()
Button(window,text="MOST VIEWED",command=mysql11.submit12).grid(row=17,column=1,sticky=W)
Button(window,text="GET MOVIE LIST",command=getmovielist).grid(row=19,column=1,sticky=W)
#t11= Entry(window,width=20,bg="white")
#t11.grid(row=15,column=1,sticky=W)
window.mainloop()




import mysql.connector
from tkinter import *

from tkinter import Entry


cnx = mysql.connector.connect(user='root', password='root',
                              host='127.0.0.1',
                              database='video_library')
#cnx.autocommit(True)
cursor= cnx.cursor()
#def getval():
 #   from optionspage import getvalues
  #  uid=getvalues()

user_id = -1
user_name = ''
movie_id = -1


def search_result(query):
    cursor.execute(query)
    return cursor.fetchall()
    cnx.commit()
def update_count(movie_id,useid,usename):
    query = "SELECT count FROM movie_count WHERE movie_id = %s" % (movie_id)
    cursor.execute(query)
    count = cursor.fetchall()[0][0]
    count = int(count) + 1
    query = "UPDATE movie_count SET count = %s where movie_id = %s" % (count, movie_id)
    cursor.execute(query)
    args= movie_id
    query= "call update_perc(%s)" % (movie_id)
    cursor.execute(query)

    uid=useid
    uname=usename
    #print(result_args[2])
    #uid=optionspage.getvalues()
    #print(uid)
    #print(optionspage.userid)
    query="insert into user_history values(%s,%s,%s)"
    val=(uid,uname,movie_id)
    cursor.execute(query,val)
    #cursor.execute(query)
    cnx.commit()

def submit12():
    #query="select * from movie_details where movie_id=(select movie_id from movie_count where count=(select max(c1.count) from movie_count c1))"
    window = Tk()

    cursor.execute("select * from movie_details where movie_id IN(select movie_id from movie_count where count=(select max(c1.count) from movie_count c1))")
    data = cursor.fetchall()
    for row in data:
        print(row)
        print()


    Label(window, text=data).grid(row=1, column=0, sticky=W)

    cnx.commit;



//creating tables

create database video_library;

use video_library;

create table movie_details
(
 movie_id integer primary key,
 country varchar(40) not null,
 language varchar(40) not null,
 movie_name varchar(40) not null,
 release_date date not null,
 genere varchar(40) not null,
 actor varchar(40) not null,
 video_type varchar(40) not null,
 age varchar(40) not null, 
 rating integer not null
 );


create table user_history
 (
 user_id integer not null,
 user_name varchar(20) not null, 
 movie_id integer not null
 );



 create table movie_count
 (
 movie_id integer primary key,
 count integer not null,
 percentage integer not null,
 movie_verdict varchar(10) not null
 );
